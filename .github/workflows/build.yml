name: Build-New

on:
  push:
  schedule:
    - cron: '0 12 * * 0'

env:
  FF_VERSION: ${{ secrets.FF_VER }} # TODO: latest release if triggered by schedule
  LLVM_VER: 13
  VCVER: '14.27.29110'
  WINSDKVER: '10.0.19041.0'
  NINJA_STATUS: '[%f/%t %e %r]'
  SF_PW_MAPPED: ${{ secrets.SF_PW }}
  SF_USER_MAPPED: ${{ secrets.SF_USER }}

jobs:
  Apple:
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: macos-11
    env:
      TARGET_OS: ${{ matrix.target }}
      CONFIG_SUFFIX: -${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        config: [default,lite]
        target: [macOS,iOS,iOSSimulator,macCatalyst]
        exclude:
          - config: default
            target: iOSSimulator
          - config: default
            target: macCatalyst
    steps:
    - uses: actions/checkout@v2
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      run: ./tools/ci-before-build.sh
    - name: Configure and Build
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      run: |
        export FFSRC=$PWD/ffmpeg-${FF_VERSION}
        ./avbuild.sh ${TARGET_OS}
    - name: Make SDK
      shell: bash
      run: ./tools/ci-after-build.sh
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: ffmpeg-*.tar.xz

  Wasm:
    runs-on: macos-11
    env:
      TARGET_OS: 'wasm'
    steps:
    - uses: actions/checkout@v2
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      run: ./tools/ci-before-build.sh
    - name: Configure and Build
      shell: bash
      run: |
        export FFSRC=$PWD/ffmpeg-${FF_VERSION}
        ./avbuild.sh ${TARGET_OS}
    - name: Make SDK
      shell: bash
      run: ./tools/ci-after-build.sh
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-${{ env.TARGET_OS }}
        path: ffmpeg-*.tar.xz

  RaspberryPi_clang:
    runs-on: ubuntu-latest
    env:
      TARGET_OS: 'raspberry-pi'
      COMPILER: 'clang'
      LLVM_VER: 8
      CONFIG_SUFFIX: -${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        config: [default,lite,lite-lto]
    steps:
    - uses: actions/checkout@v2
    - name: 'Restore sysroot cache'
      id: sysroot-cache
      uses: actions/cache@v2
      with:
        path: /tmp/sysroot
        key: sysroot-${{ env.TARGET_OS }}-${{ secrets.LINUX_SYSROOT_ID }}
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        SYSROOT_CACHE_HIT: ${{ steps.sysroot-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      run: ./tools/ci-before-build.sh
    - name: Configure and Build
      shell: bash
      run: |
        export FFSRC=$PWD/ffmpeg-${FF_VERSION}
        export SYSROOT=/tmp/sysroot
        USE_TOOLCHAIN=clang-${LLVM_VER} ./avbuild.sh ${TARGET_OS}
    - name: Make SDK
      shell: bash
      run: ./tools/ci-after-build.sh
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: ffmpeg-*.tar.xz


  VS2022:
    runs-on: windows-2022
    env:
      TARGET_OS: ${{ matrix.target }}
      CONFIG_SUFFIX: -${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        config: [default,lite]
        target: [windows-desktop,uwp]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Create Build Environment
      shell: cmd
      run: |
        set FF_BRANCH=%FF_VERSION%
        if not [%FF_BRANCH%]==[master] set FF_BRANCH=release/%FF_VERSION%
        git clone -b %FF_BRANCH% --depth 1 --no-tags https://git.ffmpeg.org/ffmpeg.git ffmpeg-%FF_VERSION%
        if not [%CONFIG_SUFFIX%]==[-default] copy /y config%CONFIG_SUFFIX%.sh config.sh
    - uses: msys2/setup-msys2@v2
      with:
        release: false # disable installation cache, so exe path in avbuild.sh is correct
        msystem: MSYS
        update: true
        install: >-
          make
          diffutils
          patch
          pkg-config
          nasm
          yasm
    - name: Install dev packages
      shell: msys2 {0}
      run: |
        wget https://sourceforge.net/projects/avbuild/files/dep/dep.7z/download -O dep.7z
    - name: Configure and Build
      shell: cmd
      run: |
        7z x -y dep.7z -otools
        set PKG_CONFIG_PATH_MFX=%CD%\tools\VS2022\lib\pkgconfig
        set MSYS2_DIR=C:\msys64
        set HOME=%CD%
        set FFSRC=%CD%\ffmpeg-%FF_VERSION%
        set BUILD_NOW=true
        tools\vcbuild.bat VS2022 %TARGET_OS%10 all
    - name: Make SDK
      shell: cmd
      run: |
        set SDK_NAME=ffmpeg-%FF_VERSION%-%TARGET_OS%-vs2022%CONFIG_SUFFIX%
        move sdk* %SDK_NAME%
        7z a -ssc -m0=lzma2 -mx=9 -ms=on -mf=off %SDK_NAME%.7z %SDK_NAME%
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-${{ env.TARGET_OS }}-VS2022${{ matrix.config }}
        path: ffmpeg-*.7z


  LAVFilters:
    runs-on: ubuntu-latest
    env:
      FFREPO: 'git://git.1f0.de/ffmpeg'
      TARGET_OS: 'windows-desktop'
      COMPILER: clang
      VCDIR: '/tmp/msvcrt-dev'
      WINDOWSSDKDIR: '/tmp/winsdk'
      PKG_CONFIG_PATH_MFX: '/tmp/ClangCL/lib/pkgconfig'
      CONFIG_SUFFIX: '-lavfilters'
    steps:
    - uses: actions/checkout@v2
      if: ${{ env.FF_VERSION == 'master' }}
      with:
        submodules: 'recursive'
    - name: 'Restore sysroot cache'
      if: ${{ env.FF_VERSION == 'master' }}
      id: sysroot-cache
      uses: actions/cache@v2
      with:
        path: |
          /tmp/winsdk
          /tmp/msvcrt-dev
        key: sysroot-${{ env.TARGET_OS }}${{ secrets.WINSDKVER }}-vc${{ secrets.VCVER }}${{ env.CONFIG_SUFFIX }}
    - name: Create Build Environment
      if: ${{ env.FF_VERSION == 'master' }}
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        SYSROOT_CACHE_HIT: ${{ steps.sysroot-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      run: ./tools/ci-before-build.sh
    - name: Configure and Build
      if: ${{ env.FF_VERSION == 'master' }}
      shell: bash
      run: |
        export FFSRC=$PWD/ffmpeg-${FF_VERSION}
        export WindowsSdkDir=${WINDOWSSDKDIR}
        export WindowsSDKVersion=$(cat ${WINDOWSSDKDIR}/.version)
        export V=1
        USE_TOOLCHAIN=clang-${LLVM_VER} ./avbuild.sh $TARGET_OS "x86 x64"
    - name: Make SDK
      if: ${{ env.FF_VERSION == 'master' }}
      shell: bash
      run: ./tools/ci-after-build.sh
    - name: Archieve SDK
      if: ${{ env.FF_VERSION == 'master' }}
      uses: actions/upload-artifact@v2
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-${{ env.TARGET_OS }}-lavfilters
        path: ffmpeg-*.tar.xz


  Windows_clang:
    runs-on: ubuntu-latest
    env:
      TARGET_OS: ${{ matrix.target }}
      COMPILER: clang
      VCDIR: '/tmp/msvcrt-dev'
      WINDOWSSDKDIR: '/tmp/winsdk'
      PKG_CONFIG_PATH_MFX: '/tmp/ClangCL/lib/pkgconfig'
      CONFIG_SUFFIX: -${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        config: [default,lite]
        target: [windows-desktop,uwp]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: 'Restore sysroot cache'
      id: sysroot-cache
      uses: actions/cache@v2
      with:
        path: |
          /tmp/winsdk
          /tmp/msvcrt-dev
        key: sysroot-${{ env.TARGET_OS }}${{ secrets.WINSDKVER }}-vc${{ secrets.VCVER }}
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        SYSROOT_CACHE_HIT: ${{ steps.sysroot-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      run: ./tools/ci-before-build.sh
    - name: Configure and Build
      shell: bash
      run: |
        export FFSRC=$PWD/ffmpeg-${FF_VERSION}
        export WindowsSdkDir=${WINDOWSSDKDIR}
        export WindowsSDKVersion=$(cat ${WINDOWSSDKDIR}/.version)
        USE_TOOLCHAIN=clang-${LLVM_VER} ./avbuild.sh $TARGET_OS "arm64-clang-cl-${LLVM_VER} arm x86 x64"
    - name: Make SDK
      shell: bash
      run: ./tools/ci-after-build.sh
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: ffmpeg-*.tar.xz


  VCRT120_clang:
    runs-on: ubuntu-latest
    env:
      TARGET_OS: windows-desktop
      COMPILER: 'clang-vcrt120'
      VCDIR: '/tmp/msvcrt-dev/120'
      WINDOWSSDKDIR: '/tmp/winsdk'
      CONFIG_SUFFIX: -${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        config: [lite]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: 'Restore sysroot cache'
      id: sysroot-cache
      uses: actions/cache@v2
      with:
        path: |
          /tmp/winsdk
          /tmp/msvcrt-dev
        key: sysroot-${{ env.TARGET_OS }}${{ secrets.WINSDKVER }}-vc${{ secrets.VCVER }}
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        SYSROOT_CACHE_HIT: ${{ steps.sysroot-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      run: ./tools/ci-before-build.sh
    - name: Configure and Build
      shell: bash
      run: |
        export FFSRC=$PWD/ffmpeg-${FF_VERSION}
        export WindowsSdkDir=${WINDOWSSDKDIR}
        export WindowsSDKVersion=$(cat ${WINDOWSSDKDIR}/.version)
        USE_TOOLCHAIN=clang-${LLVM_VER} ./avbuild.sh $TARGET_OS "x86 x64"
    - name: Make SDK
      shell: bash
      run: ./tools/ci-after-build.sh
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: ffmpeg-*.tar.xz


  Linux_clang:
    runs-on: ubuntu-latest
    env:
      TARGET_OS: linux
      COMPILER: clang
      PKG_CONFIG_PATH_MFX: "/tmp/linux64-gcc/lib/pkgconfig"
      CONFIG_SUFFIX: -${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        config: [default,lite,lite-lto]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: 'Restore sysroot cache'
      id: sysroot-cache
      uses: actions/cache@v2
      with:
        path: /tmp/sysroot
        key: sysroot-${{ env.TARGET_OS }}-${{ secrets.LINUX_SYSROOT_ID }}
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        SYSROOT_CACHE_HIT: ${{ steps.sysroot-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      run: ./tools/ci-before-build.sh
    - name: Configure and Build
      shell: bash
      run: |
        export FFSRC=$PWD/ffmpeg-${FF_VERSION}
        export SYSROOT=/tmp/sysroot
        USE_TOOLCHAIN=clang-${LLVM_VER} ./avbuild.sh linux "amd64 arm64 armhf"
    - name: Make SDK
      shell: bash
      run: ./tools/ci-after-build.sh
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: ffmpeg-*.tar.xz

  Android:
    runs-on: ubuntu-latest
    env:
      TARGET_OS: android
      CONFIG_SUFFIX: -${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        config: [default,lite,lite-lto]
    steps:
    - uses: actions/checkout@v2
    - name: 'Restore sysroot cache'
      id: sysroot-cache
      uses: actions/cache@v2
      with:
        path: /tmp/sysroot
        key: sysroot-${{ env.TARGET_OS }}-${{ secrets.LINUX_SYSROOT_ID }}
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        SYSROOT_CACHE_HIT: ${{ steps.sysroot-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      run: ./tools/ci-before-build.sh
    - name: Configure and Build
      shell: bash
      run: |
        export ANDROID_NDK=$ANDROID_NDK_LATEST_HOME
        export FFSRC=$PWD/ffmpeg-${FF_VERSION}
        ./avbuild.sh ${TARGET_OS}
    - name: Make SDK
      shell: bash
      run: ./tools/ci-after-build.sh
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: ffmpeg-*.tar.xz

  Upload:
    runs-on: ubuntu-latest
    needs: [VS2022]
    steps:
    - name: Download vs2022 desktop
      uses: actions/download-artifact@v2
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-windows-desktop-VS2022default
    - name: Download vs2022 desktop lite
      uses: actions/download-artifact@v2
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-windows-desktop-VS2022lite
    - name: Download vs2022 uwp
      uses: actions/download-artifact@v2
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-uwp-VS2022default
    - name: Download vs2022 uwp lite
      uses: actions/download-artifact@v2
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-uwp-VS2022lite
    - name: Upload to SourceForge
      shell: bash
      run:  |
        sudo apt update
        sudo apt install -y sshpass
        FFV=${{ env.FF_VERSION }}
        for f in `ls ffmpeg-*.7z`; do
          OS=${f%%-vs*}
          OS=${OS##*${FFV}-}
          sshpass -p $SF_PW_MAPPED scp -o StrictHostKeyChecking=no $f $SF_USER_MAPPED,avbuild@frs.sourceforge.net:/home/frs/project/a/av/avbuild/$OS
        done
